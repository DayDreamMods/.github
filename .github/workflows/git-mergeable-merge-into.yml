name: Git Mergeable Merge-Into

on:
  workflow_call:
    inputs:
      mergeable-id:
        description: Mergeable branch @ repo short url -> Destination branch.
        required: true
        default: feature/mergeable/...@RedEyeMods/.github->main
        type: string
      target-repo:
        type: string
        description: The repository to merge into.
        default: "~"
        required: false
    secrets:
      GPG_PRIVATE_KEY:
        description: 'Private GPG key for commit signing'
        required: true
      GPG_SIGNING_PASSPHRASE:
        description: 'The passphrase for the GPG_PRIVATE_KEY'
        required: true
      PR_PAT:
        description: 'The personal access token for the PR user'
        required: true

jobs:   
  merge-and-pr:
    name: Check & Merge Changes
    runs-on: ubuntu-latest
    steps:
      - name: Input Sanitation
        id: input-sanitation
        uses: actions/github-script@v7
        with:
          script: |
            const input = "${{ inputs.mergeable-id }}";
            const match = input.match(/([\w-\/]+)@([^/]+)\/(.+)->(.+)/);
            if (!match)
              throw new Error('Invalid input format. Expected format: branch/name@owner/repo->target-branch');

            core.setOutput('source-branch', match[1]);
            core.setOutput('source-repo', `${match[2]}/${match[3]}`);
            core.setOutput('target-branch', match[4]);
            core.setOutput('target-repo', '${{ inputs.target-repo }}' == '~' ? '${{ github.repository }}' : '${{ inputs.target-repo }}');
                      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.input-sanitation.outputs.target-branch }}
          repository: ${{ steps.input-sanitation.outputs.target-repo }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_SIGNING_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          
      - name: Add New Remote
        run: |
          git remote add auto-merge https://github.com/${{ steps.input-sanitation.outputs.source-repo }}.git
          git fetch auto-merge ${{ steps.input-sanitation.outputs.source-branch }}

      - name: Simulate merge
        id: simulate-merge
        run: |
          git merge --no-commit --no-ff --allow-unrelated-histories auto-merge/${{ steps.input-sanitation.outputs.source-branch }} || echo "Merge conflicts detected"
          if [ "$(git diff --name-only HEAD)" != "" ]; then
            echo "Merge would result in changes."
            echo "merge_needed=true" >> $GITHUB_ENV
          else
            echo "Merge would not result in any changes."
            echo "merge_needed=false" >> $GITHUB_ENV
          fi
          git merge --abort
          
      - name: Merge Results
        if: env.merge_needed == 'true'
        id: merge
        run: |
          git merge -X theirs --allow-unrelated-histories auto-merge/${{ steps.input-sanitation.outputs.source-branch }}

      - name: Ensure .gitmergeables entry
        if: env.merge_needed == 'true'
        id: ensure-mergeables
        uses: actions/github-script@v7
        with:
          script: |
            const entry = '${{ inputs.mergeable-id }}';
            const filePath = '.github/.mergeables';
            const fs = require('fs');
            const path = require('path');

            // Check if the file exists and read its content if it does
            let fileContent = '';
            if (fs.existsSync(filePath)) {
              fileContent = fs.readFileSync(filePath, 'utf8');
            }

            // Ensure the entry exists
            if (!fileContent.includes(entry)) {
              // Add the entry to the file content
              fileContent += `${entry}\n`;
              
              // Write the updated content back to the file
              fs.writeFileSync(filePath, fileContent, 'utf8');

              // Stage the changes, commit, and push
              const execSync = require('child_process').execSync;
              execSync('git add ' + filePath);
              execSync(`git commit -m "Add .github/.mergeables entry: ${entry}"`);
            } else {
              console.log('Entry already exists in .mergeables');
            }
          result-encoding: json

      - name: Create Pull Request
        if: steps.merge.outcome == 'success'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PR_PAT }}
          title: "Update ${{ steps.input-sanitation.outputs.source-repo }}/${{ steps.input-sanitation.outputs.source-branch }}"
          body: ""
          branch: chore/mergeables/update/${{ steps.input-sanitation.outputs.source-branch }}
          author: "RedEyeMods <redeyemodding@gmail.com>"

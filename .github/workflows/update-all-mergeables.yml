name: "[Manual] Trigger Org-Wide Update"

on: 
  workflow_dispatch:
    inputs:
      filter-mergeable:
        type: string
        description: Mergeable id to update in the form of (feature/mergeable/...@RedEyeMods/.github).
        required: false
jobs:
  inputs-report:
    name: Summary Report
    runs-on: ubuntu-latest
    steps:
      - name: Script
        uses: actions/github-script@v7
        with:
          script: |
            core.notice("Initiating organization-wide update of '${{ inputs.filter-mergeable }}'.");

  get-repositories:
    name: Organization Repositories
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.org-grab.outputs.result }}
    steps:
      - name: Get Organization Data
        id: org-grab
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            var request = await github.request(`GET ${context.payload.organization.repos_url.replace('https://api.github.com', '')}`);
            if (request.status != 200)
              throw new Exception('Bad API response: ' + request.status);

            var repos = request.data.filter(i => !i.archived && !i.private).map(i => i.full_name);
            console.log(repos);
            return repos;
  
  update-matrix:
    name: Update Matrix
    needs: get-repositories
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target-repo: ${{ fromJson(needs.get-repositories.outputs.repositories) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.target-repo }}
          ref: ${{ github.event.repository.default_branch }}

      - name: Trigger workflows
        id: mergeables
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            const fs = require('fs');
            if (!fs.existsSync('.github/.mergeables')) {
              core.warning("${{ matrix.target-repo }} doesn't contain a .github/.mergeables");
              return;
            }
            const homeNameSplit = ("${{ github.repository }}").split('/');

            github.rest.actions.createWorkflowDispatch({
              owner: homeNameSplit[0],
              repo: homeNameSplit[1],
              workflow_id: 'update-mergeables.yml',
              ref: context.payload.repository.default_branch,
              inputs: { 
                "filter-mergeable": '${{ inputs.filter-mergeable }}',
                "target-repo": '${{ matrix.target-repo }}'
              }
            });
          result-encoding: json

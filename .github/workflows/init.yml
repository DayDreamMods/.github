name: Repository Setup

on: 
  workflow_dispatch:
  push:
    branches:
      - '**'

jobs:
  run-init:
    name: Initial Repository Setup
    runs-on: ubuntu-latest
    steps:
      - name: Copy Rulesets
        uses: actions/github-script@v7
        env:
          CUR_REPO: ${{ github.repository }}
          TARGET_REPO: RedEyeMods/.github
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            async function main() {
              const [currentOwner, currentRepo] = process.env.CUR_REPO.split('/');
              const [targetOwner, targetRepo] = process.env.TARGET_REPO.split('/');

              const copyRulesets = await github.rest.repos.getRepoRulesets({
                owner: targetOwner, repo: targetRepo
              });
              
              const curRulesets = await github.rest.repos.getRepoRulesets({
                owner: currentOwner, repo: currentRepo
              });
              
              for (const rulesetRef of copyRulesets.data) {
                const isOn = rulesetRef.name.includes("[ONN]");
                if (!isOn && !rulesetRef.name.includes("[OFF]")) continue;
                const newName = rulesetRef.name.replace("[OFF]", "[ONN]").replace("[ONN]", "[WF]");

                const fullRuleset = await github.rest.repos.getRepoRuleset({
                  owner: targetOwner, repo: targetRepo, ruleset_id: rulesetRef.id
                });

                const existingIdx = curRulesets.data.findIndex(rs => rs.name == newName);
                if (existingIdx >= 0) {
                  await github.rest.repos.deleteRepoRuleset({
                    owner: currentOwner, repo: currentRepo, ruleset_id: curRulesets[existingIdx].data.id
                  });
                }

                await github.rest.repos.createRepoRuleset({
                  owner: currentOwner, repo: currentRepo,
                  name: newName,
                  enforcement: isOn ? 'active' : 'disabled',
                  bypass_actors: fullRuleset.data.bypass_actors,
                  rules: fullRuleset.data.rules,
                  conditions: fullRuleset.data.conditions
                });
              }
            }

            main().catch(error => {
                console.error(error);
                process.exit(1);
            });
            
      - name: Copy Labels
        uses: actions/github-script@v7
        env:
          CUR_REPO: ${{ github.repository }}
          TARGET_REPO: RedEyeMods/.github
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            async function main() {
              const [currentOwner, currentRepo] = process.env.CUR_REPO.split('/');
              const [targetOwner, targetRepo] = process.env.TARGET_REPO.split('/');

              const copyLabels = await github.rest.issues.listLabelsForRepo({
                owner: targetOwner, repo: targetRepo
              });
              const currentLabels = await github.rest.issues.listLabelsForRepo({
                owner: currentOwner, repo: currentRepo
              });

              for (const label of copyLabels.data) {
                const curLabelIdx = currentLabels.data.findIndex(lbl => lbl.name == label.name);
                if (curLabelIdx >= 0) {
                  await github.rest.issues.deleteLabel({
                    owner: currentOwner, repo: currentRepo, name: currentLabels[curLabelIdx].data.name
                  });
                } 

                await github.rest.issues.createLabel({
                  owner: currentOwner, repo: currentRepo, 
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
              }
            }

            main().catch(error => {
              console.error(error);
              process.exit(1);
            });
  one-time:
    name: Execute One Time
    runs-on: ubuntu-latest
    steps:
      - name: Disable Workflow
        run: |
          gh workflow disable -R $GITHUB_REPOSITORY "${{ github.workflow }}"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
